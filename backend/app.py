from flask import Flask, jsonify, request
from flask_cors import CORS
from slot_logic import SlotMachine
from config import INITIAL_BALANCE, SERVER_PORT, DEBUG_MODE
import time

app = Flask(__name__)
CORS(app)

machine = SlotMachine(initial_balance=INITIAL_BALANCE)
print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º {INITIAL_BALANCE}.")
print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—à–∏–Ω—ã: {machine.num_reels} –±–∞—Ä–∞–±–∞–Ω–æ–≤, {machine.num_rows} —Ä—è–¥–æ–≤.")
print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç: {len(machine.paylines)}")


@app.route('/state', methods=['GET'])
def get_state():
    return jsonify(machine.get_state())


@app.route('/spin', methods=['POST'])
def handle_spin():
    if not request.is_json:
        return jsonify({"error": "Request must be JSON", "balance": machine.get_balance()}), 400

    data = request.get_json()
    bet_amount = data.get('bet', machine.spin_cost)

    if not isinstance(bet_amount, int) or bet_amount <= 0:
        return jsonify({"error": "Invalid bet amount", "balance": machine.get_balance()}), 400

    try:
        spin_result = machine.spin(bet=bet_amount)
    except Exception as e:
        print(f"Error during spin logic: {e}")
        return jsonify({"error": "An internal error occurred during spin.", "balance": machine.get_balance()}), 500

    if spin_result is None:
        return jsonify({
            'error': 'Insufficient funds or invalid bet',
            'balance': machine.get_balance()
        }), 400

    grid, current_balance, payout_info = spin_result

    return jsonify({
        'grid': grid,
        'balance': current_balance,
        'payout': payout_info,
        'spin_cost': bet_amount
    })


@app.route('/add_funds', methods=['POST'])
def handle_add_funds():
    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400

    data = request.get_json()
    amount = data.get('amount')

    if amount is None or not isinstance(amount, int) or amount <= 0:
        return jsonify({"error": "Invalid amount specified"}), 400

    machine.add_funds(amount)
    return jsonify({
        "message": f"{amount} added.",
        "new_balance": machine.get_balance()
    })


@app.route('/rtp', methods=['GET'])
def get_rtp():
    return jsonify({
        'rtp': machine.DEFAULT_RTP,
        'symbol_weights': machine.reel_weights
    })


@app.route('/', methods=['GET'])
def index():
    return ("<h1>–°–µ—Ä–≤–µ—Ä —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1><p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: /state (GET), /spin (POST), /add_funds (POST), /rtp (GET)</p>")

def benchmark_rtp_inline(machine, num_spins=10000, bet=1):
    total_bet = 0
    total_win = 0

    for i in range(num_spins):
        try:
            result = machine.spin(bet=bet)
            if result is None:
                machine.add_funds(10000)  # –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ
                result = machine.spin(bet=bet)

            grid, _, payout_info = result
            total_win += payout_info.get('amount', 0)
            total_bet += bet

            if (i + 1) % 1000 == 0:
                print(f"{i + 1}/{num_spins} spins...")

        except Exception as e:
            print(f"Error during spin {i}: {e}")

    actual_rtp = total_win / total_bet if total_bet else 0
    print("\nüéØ RTP —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:")
    print(f"  ‚û§ –°—Ç–∞–≤–æ–∫ –≤—Å–µ–≥–æ: {total_bet}")
    print(f"  ‚û§ –í—ã–∏–≥—Ä—ã—à–µ–π –≤—Å–µ–≥–æ: {total_win}")
    print(f"  ‚û§ –†–∞—Å—á—ë—Ç–Ω—ã–π RTP: {actual_rtp:.4f} ({actual_rtp * 100:.2f}%)")


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=SERVER_PORT, debug=DEBUG_MODE)
    # print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ RTP...")
    # benchmark_rtp_inline(machine, num_spins=10000, bet=1)
    # print("‚úÖ –¢–µ—Å—Ç RTP –∑–∞–≤–µ—Ä—à—ë–Ω\n")
    #
    # app.run(host='0.0.0.0', port=SERVER_PORT, debug=DEBUG_MODE)